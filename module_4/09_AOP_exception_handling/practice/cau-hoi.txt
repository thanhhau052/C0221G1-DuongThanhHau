1. Mục đích sử dụng AOP?
	Aspect Oriented Programming (AOP) – lập trình hướng khía cạnh: là một kỹ thuật lập trình (kiểu như lập 	trình hướng đối tượng) nhằm phân tách chương trình thành cách moudule riêng rẽ, phân biệt, không 		phụ thuộc nhau.

	Khi hoạt động, chương trình sẽ kết hợp các module lại để thực hiện các chức năng nhưng khi sửa đổi 1 		chức năng thì chỉ cần sửa 1 module.

	AOP không phải dùng để thay thế OOP mà để bổ sung cho OOP.

2. Phân biệt các khái niệm Aspect, Advice, Pointcut, JoinPoint?

Aspect (khía cạnh)
           	• Một thuật ngữ trong AOP, chỉ “mối quan tâm xuyên suốt”.
	• Là một khối mã cô lập có khả năng tái sử dụng.
	• Do được cô lập khỏi nghiệp vụ chính, aspect giúp mã nghiệp vụ chính
	trở nên dễ hiểu hơn. 


Join Point (điểm gia nhập)
	• Một vị trí nào đó trong luồng thực thi chương trình mà advice sẽ
	được weave (đan vào).
	• Các join point phổ biến bao gồm: vị trí đọc/ghi giá trị của field, vị trí
	gọi/thực thi một phương thức/constructor, hay vị trí mà một ngoại lệ
	được tung ra.
	• Join point cần được thiết kế kỹ.


Point Cut
	Chỉ ra một tập hợp các join point để công cụ AOP đan các advice vào
	nghiệp vụ chính.


Các loại advice
	• Before Advice: thực thi trước join point.
	• After Returning Advice: thực thi sau khi joint point hoàn thành bình
	thường
	• After Throwing Advice: thực thi nếu joint point kết thúc do có ngoại
	lệ được tung
	• After (finally) Advice: thực thi sau khi joint point hoàn thành bất kể
	dưới điều kiện nào
	• Around Advice: thực thi cả trước và sau joint point


3. @ExceptionHandler dùng để làm gì? Khi nào thì nên sử dụng annotation này?
	@ExceptionHandler để cắt ngang quá trình xử lý của Controller, và xử lý các ngoại lệ xảy ra.
	Hiểu đơn giản là Controller đang hoạt động bình thường, chẳng may có một Exception được ném ra, thì 		
thay vì báo lỗi hệ thống, thì nó sẽ được thằng @RestControllerAdvice và @ExceptionHandler đón lấy và 		
xử lý. Sau đó trả về cho người dùng thông tin hữu ích hơn.